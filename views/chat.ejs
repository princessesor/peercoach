<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Chat with <%= matchedUser.name %></title>

        <link rel="stylesheet" href="/styles/chat.css" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

    </head>
    <body>
        <div class="container">
            
            <!-- Back to Matches Button -->
            <button class="back-button" onclick="window.location.href='/matchesPage'">
                <i class="fas fa-arrow-left"></i> Back to Matches</button>
            
            <div class="title-container">
            <h1>Chat with <%= matchedUser.name %></h1>
            </div>
            
            <div id="chat-box" class="chat-box">
                <!-- Messages will be dynamically added here -->
            </div>

            <!-- Chat Form -->
            <form id="chat-form" class="chat-form">
                <input type="text" name="message" placeholder="Type your message here" required class="chat-input" />
                <button type="submit" class="send-button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>

            <!-- Create Room Button at the top right -->
            <button id="createRoomBtn" class="create-room-btn">
               Create Room   <i class="fas fa-plus-circle"></i></button>
            
            <!-- Room Actions: Join Room button at the bottom -->
            <div class="room-actions">
                <div class="join-room-container" >
            <input type="text" id="roomIdInput" placeholder="Enter Room ID to Join" class="room-input" />   
                <button id="joinRoomBtn" class="join-room-btn">
                 <i class="fas fa-door-open"></i>
                 </button>
            </div>
            </div>
             

         <script>
            // Create Room using POST
               document.getElementById('createRoomBtn').addEventListener('click', () => {
                fetch('/room/create', {
                  method: 'POST',
                 })
               .then(res => res.json())
               .then(data => {
        if (data.roomId) {
          // Redirect to the created room
          window.location.href = `/room/${data.roomId}`;
        } else {
          alert('Room creation failed.');
        }
      })
      .catch(error => {
        console.error('Error creating room:', error);
      });
    });
 
  // Join Room using input
  document.getElementById('joinRoomBtn').addEventListener('click', () => {
    const roomId = document.getElementById('roomIdInput').value.trim();
    if (roomId) {
      window.location.href = `/room/${roomId}`;
    } else {
      alert('Please enter a valid Room ID.');
    }
  });
</script>

        </div>

        <script src="/socket.io/socket.io.js"></script>
        <!-- Include Socket.io -->
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const chatForm = document.getElementById('chat-form');
                const chatBox = document.getElementById('chat-box');
                const messageInput = chatForm ? chatForm.querySelector('input[name="message"]') : null;

                const socket = io('http://localhost:8001', {
                    transports: ['websocket'],
                    withCredentials: true, // Handles authentication sessions if needed
                });

                const currentUserId = '<%= user._id %>'; // Local storage
                const matchedUserId = '<%= matchedUser._id %>';
                console.log('currentUserId', currentUserId);
                console.log(matchedUserId);

                if (!currentUserId || !matchedUserId) {
                    console.error('Error: Missing user IDs!', { currentUserId, matchedUserId });
                    return;
                }

                // **Fetch previous messages when the page loads**
                async function fetchMessages() {
                    try {
                        const response = await fetch(
                            `http://localhost:8001/messages?senderId=${currentUserId}&receiverId=${matchedUserId}`,
                        );
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }

                        const messages = await response.json();

                        // Debugging: Log the messages to check their structure
                        console.log('Fetched messages:', messages);

                        if (Array.isArray(messages)) {
                            messages.forEach((msg) => {
                                appendMessage(msg.sender === currentUserId ? 'You' : 'Them', msg.message);
                            });
                        } else {
                            console.error('Error: Messages are not an array', messages);
                        }
                    } catch (error) {
                        console.error('Error fetching messages:', error);
                    }
                }

                // Call fetchMessages when the page loads
                (async () => {
                    await fetchMessages();
                })();

                // **Handle message submission**
                chatForm.addEventListener('submit', (e) => {
                    e.preventDefault(); // Prevents page reload
                    const message = messageInput.value.trim();

                    if (message) {
                        // **Send message to server**
                        socket.emit('sendMessage', {
                            sender: currentUserId,
                            receiver: matchedUserId,
                            message: message,
                        });

                        // **Display message in the chat box**
                        appendMessage('You', message);
                        messageInput.value = ''; // Clears input field
                    }
                });

                // **Listen for new messages from the server**
                socket.on('newMessage', (data) => {
                    if (data.sender !== currentUserId) {
                        appendMessage('Them', data.message);
                    }
                });

                // **Function to display messages**
                function appendMessage(sender, content) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message');
    if (sender === 'You') {
        messageElement.classList.add('from-you');
    } else {
        messageElement.classList.add('from-them');
    }
    messageElement.innerHTML = `<strong>${sender}:</strong> ${content}`;
    chatBox.appendChild(messageElement);
    chatBox.scrollTop = chatBox.scrollHeight;
}


                console.log('Chat script loaded successfully!');
            });
        </script>
    </body>
</html>
